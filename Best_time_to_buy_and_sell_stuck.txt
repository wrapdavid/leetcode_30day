方法一:

int maxProfit(int* prices, int pricesSize){
  int profits[pricesSize + 1];
  
  if(pricesSize <= 1){return 0;}
  profits[1] = 0;  
  for(int k = 2; k <= pricesSize; k++)
  {
           //決定不賣
      //[7,1,5,3,6,4]
      int max = 0;
      int profit;
      profit = profits[k - 1];
      if(profit > max)
      {
          max = profit;
      }
           //決定賣
      //[7,1,5,3,6] (4 - 6) => maxProfit(prices, 5) + (prices[pricesSize - 1] - prices[4])
      //[7,1,5,3] (4 - 3)   => maxProfit(prices, 4) + (prices[pricesSize - 1] - prices[3])
      //[7,1,5] (4 - 5)     => maxProfit(prices, 3) + (prices[pricesSize - 1] - prices[2])
      //[7,1] (4 - 1)       => maxProfit(prices, 2) + (prices[pricesSize - 1] - prices[1])
      //[7] (4 - 7)         => maxProfit(prices, 1) + (prices[pricesSize - 1] - prices[0])
      for(int i = 1; i <= k - 1; i++)
      {
          profit = profits[i]  + prices[k - 1] - prices[i - 1];
          if(max < profit)
          {
              max = profit;
          }

      }
      profits[k] = max;
  }  
 
 
  return profits[pricesSize];
    
}


方法二:
//只跟相鄰的值比較
int maxProfit(int* prices, int pricesSize){
    int total = 0;
    for(int i = 0; i + 1 < pricesSize; i++)
    {
        if(prices[i] < prices[i + 1])
        {
            total += prices[i + 1] - prices[i];
        }
        
    }
    return total;
}